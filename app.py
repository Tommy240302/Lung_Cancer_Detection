import tkinter as tk
from tkinter import ttk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import pickle
import numpy as np
import pandas as pd
from numpy.array_api import result_type
from tensorflow.keras.models import load_model

with open(r"F:\TTCS\Lung-Cancer-Detection\lung-cancer-detection-ml\model.pkl", "rb") as file:
    model = pickle.load(file)
print("Model loaded successfully!")
print("Model type:", type(model))
print("Model details:", model)

# Load model CNN
model_cnn = load_model(r"F:\TTCS\Lung-Cancer-Detection\lung-cancer-detection-cnn\model.h5")
print("Model CNN loaded successfully!")

# T·∫°o c·ª≠a s·ªï ch√≠nh
window = tk.Tk()
window.title("Vehicle Detection System")
window.geometry("900x600")
window.configure(bg="#F5F5F5")  # Background

# Fonts
title_font = ("Helvetica", 16, "bold")
label_font = ("Helvetica", 12)
button_font = ("Helvetica", 12, "bold")

# Ch·ª©c nƒÉng ch·ªçn ·∫£nh
def open_image_file():
    file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.jpg;*.png;*.jpeg")])
    if file_path:
        try:
            # Hi·ªÉn th·ªã ·∫£nh l√™n giao di·ªán
            image = Image.open(file_path)
            image = image.resize((300, 300), Image.LANCZOS)
            img = ImageTk.PhotoImage(image)
            la3.config(image=img)
            la3.image = img  # Gi·ªØ tham chi·∫øu ƒë·ªÉ kh√¥ng b·ªã x√≥a

            # D·ª± ƒëo√°n ·∫£nh
            predicted_class = predict_image('F:\TTCS\Lung-Cancer-Detection\lung-cancer-detection-cnn\model.h5', file_path)  # 'model.h5' l√† t√™n model c·ªßa b·∫°n
            if predicted_class is not None:
                messagebox.showinfo("K·∫øt qu·∫£ ph√¢n lo·∫°i", f"·∫¢nh ƒë∆∞·ª£c ph√¢n lo·∫°i v√†o l·ªõp: {predicted_class}")
            else:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ ph√¢n lo·∫°i ·∫£nh.")

        except Exception as e:
            messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói khi m·ªü ho·∫∑c ph√¢n t√≠ch ·∫£nh:\n{str(e)}")


def predict_image(model_path, image_path):
    try:
        # Load model CNN b·∫±ng h√†m load_model c·ªßa Keras
        model = load_model(model_path)
        print("‚úÖ Model CNN ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng!")

        # Ki·ªÉm tra input_shape c·ªßa model
        print("üîπ Model input shape:", model.input_shape)

        # Load v√† x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o
        img = Image.open(image_path).convert('RGB')  # ƒê·∫£m b·∫£o ·∫£nh RGB
        img = img.resize((224, 224))  # Resize theo k√≠ch th∆∞·ªõc model y√™u c·∫ßu
        img_array = np.array(img) / 255.0  # Chu·∫©n h√≥a ·∫£nh v·ªÅ [0, 1]

        # Ki·ªÉm tra shape sau x·ª≠ l√Ω
        print("üîπ Shape ·∫£nh sau x·ª≠ l√Ω:", img_array.shape)

        # Th√™m chi·ªÅu batch_size n·∫øu c·∫ßn thi·∫øt
        if len(img_array.shape) == 3:
            img_array = np.expand_dims(img_array, axis=0)

        print("üîπ Shape ·∫£nh ƒë∆∞a v√†o model:", img_array.shape)

        # D·ª± ƒëo√°n v√† l·∫•y k·∫øt qu·∫£
        prediction = model.predict(img_array)
        predicted_class = np.argmax(prediction, axis=1)[0]

        print("üîπ K·∫øt qu·∫£ d·ª± ƒëo√°n:", prediction)
        print("üîπ L·ªõp d·ª± ƒëo√°n:", predicted_class)

        return predicted_class

    except Exception as e:
        print(f"‚ùå L·ªói khi d·ª± ƒëo√°n ·∫£nh: {e}")
        return None


def reset_image():
    la3.config(image='')

def reset_symptoms():
    for var in check_vars:
        var.set(0)


def predict_lung_cancer():
    try:
        print("üîç Ki·ªÉm tra model tr∆∞·ªõc khi d·ª± ƒëo√°n...")
        print("Model type:", type(model))
        print("Model details:", model)

        # L·∫•y d·ªØ li·ªáu ƒë·∫ßu v√†o
        age = int(spin_age.get())
        gender = 1 if gender_var.get() == "Nam" else 0
        symptoms = [2 if var.get() == 1 else 1 for var in check_vars]  # 0 n·∫øu kh√¥ng t√≠ch, 1 n·∫øu t√≠ch

        # S·ª≠ d·ª•ng ƒë√∫ng t√™n c·ªôt t·ª´ model
        feature_names = list(model.feature_names_in_)

        # T·∫°o DataFrame v·ªõi ƒë√∫ng t√™n c·ªôt
        input_data = pd.DataFrame([symptoms], columns=[
            "SMOKING", "YELLOW_FINGERS", "ANXIETY", "PEER_PRESSURE",
            "CHRONIC DISEASE", "FATIGUE ", "ALLERGY ", "WHEEZING",
            "ALCOHOL CONSUMING", "COUGHING", "SHORTNESS OF BREATH",
            "SWALLOWING DIFFICULTY", "CHEST PAIN"
        ])
        input_data.insert(0, "GENDER", gender)
        input_data.insert(1, "AGE", age)

        # ƒê·ªìng b·ªô t√™n c·ªôt v·ªõi model
        input_data.columns = feature_names

        # **Debug: In d·ªØ li·ªáu ƒë·∫ßu v√†o**
        print("\nüîπ D·ªØ li·ªáu ƒë·∫ßu v√†o cho model:")
        print(input_data)

        # **D·ª± ƒëo√°n**
        try:
            prediction = model.predict(input_data)[0]
            print("‚úÖ D·ª± ƒëo√°n th√†nh c√¥ng! K·∫øt qu·∫£:", prediction)

            if hasattr(model, "predict_proba"):
                probabilities = model.predict_proba(input_data)
                print("üìä X√°c su·∫•t d·ª± ƒëo√°n:", probabilities)

            result_text = "C√≥ nguy c∆° m·∫Øc ung th∆∞ ph·ªïi!" if prediction == 1 else "Kh√¥ng c√≥ nguy c∆° m·∫Øc ung th∆∞ ph·ªïi."
        except Exception as pred_error:
            print("‚ùå L·ªói khi d·ª± ƒëo√°n:", str(pred_error))
            result_text = f"L·ªói khi d·ª± ƒëo√°n: {str(pred_error)}"

    except ValueError as ve:
        print("‚ùå L·ªói nh·∫≠p li·ªáu:", str(ve))
        result_text = "L·ªói: Tu·ªïi ph·∫£i l√† s·ªë nguy√™n h·ª£p l·ªá!"
    except Exception as e:
        print("‚ùå L·ªói to√†n c·ª•c:", str(e))
        result_text = f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}"

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print("üì¢ K·∫øt qu·∫£ hi·ªÉn th·ªã:", result_text)
    result_entry.delete(0, tk.END)
    result_entry.insert(0, result_text)


# Khai b√°o to√†n c·ª•c tr∆∞·ªõc khi s·ª≠ d·ª•ng
check_vars = []


def nhap_trieu_chung():
    global check_vars  # ƒê·∫£m b·∫£o c√≥ th·ªÉ truy c·∫≠p bi·∫øn to√†n c·ª•c
    check_vars = []  # Reset danh s√°ch ƒë·ªÉ tr√°nh l∆∞u tr·∫°ng th√°i c≈©
    check_vars.clear()

    new_window = tk.Toplevel()
    new_window.title("Nh·∫≠p th√¥ng tin")
    new_window.geometry("900x600")
    new_window.configure(bg="#E8F0F2")  # N·ªÅn nh·∫π nh√†ng

    # Ti√™u ƒë·ªÅ
    label_title = tk.Label(new_window, text="NH·∫¨P TH√îNG TIN", font=("Helvetica", 18, "bold"), bg="#4A90E2", fg="white")
    label_title.pack(fill="x", pady=10)

    # ==== Khung th√¥ng tin c√° nh√¢n ====
    frame_info = tk.Frame(new_window, bg="#E8F0F2")
    frame_info.pack(pady=10, padx=20, fill="x")

    tk.Label(frame_info, text="Tu·ªïi:", font=("Helvetica", 12), bg="#E8F0F2").grid(row=0, column=0, padx=5, pady=5,
                                                                                  sticky="w")
    global spin_age
    spin_age = tk.Spinbox(frame_info, from_=0, to=100, width=5, font=("Helvetica", 12))
    spin_age.grid(row=0, column=1, padx=10, pady=5)

    tk.Label(frame_info, text="Gi·ªõi t√≠nh:", font=("Helvetica", 12), bg="#E8F0F2").grid(row=0, column=2, padx=5, pady=5,
                                                                                       sticky="w")
    global gender_var
    gender_var = tk.StringVar(value="Nam")
    gender_dropdown = ttk.Combobox(frame_info, textvariable=gender_var, values=["Nam", "N·ªØ"], state="readonly", width=7)
    gender_dropdown.grid(row=0, column=3, padx=10, pady=5)

    # ==== Khung tri·ªáu ch·ª©ng ====
    frame_table = tk.Frame(new_window, bg="#E8F0F2")
    frame_table.pack(pady=10, padx=20, fill="x")

    tk.Label(frame_table, text="Tri·ªáu ch·ª©ng", font=("Helvetica", 12, "bold"), bg="#4A90E2", fg="white").grid(
        row=0, column=0, columnspan=2, pady=5, sticky="ew"
    )

    symptoms = [
        "H√∫t thu·ªëc", "V√†ng ng√≥n tay", "Lo l·∫Øng", "√Åp l·ª±c t·ª´ b·∫°n b√®",
        "B·ªánh m√£n t√≠nh", "M·ªát m·ªèi", "D·ªã ·ª©ng", "Th·ªü kh√≤ kh√®",
        "U·ªëng r∆∞·ª£u", "Ho", "Kh√≥ th·ªü", "Kh√≥ nu·ªët", "ƒêau ng·ª±c"
    ]

    for i, symptom in enumerate(symptoms):
        tk.Label(frame_table, text=symptom, font=("Helvetica", 11), bg="#E8F0F2").grid(
            row=i + 1, column=0, sticky="w", padx=10, pady=3
        )
        var = tk.IntVar()
        check_vars.append(var)
        tk.Checkbutton(frame_table, variable=var, bg="#E8F0F2").grid(row=i + 1, column=1, padx=10)

    # ==== Khung d·ª± ƒëo√°n v√† k·∫øt qu·∫£ ====
    frame_buttons = tk.Frame(new_window, bg="#E8F0F2")
    frame_buttons.pack(pady=10, padx=20, fill="x")

    btn_predict = tk.Button(frame_buttons, text="D·ª± ƒëo√°n", font=("Helvetica", 12, "bold"), bg="#4A90E2", fg="white",
                            padx=10, command=predict_lung_cancer)
    btn_predict.pack(side="left", padx=20)
    btn_reset = tk.Button(frame_buttons, text="Reset", font=("Helvetica", 12, "bold"), bg="#4A90E2", fg="white",
                            padx=10, command=reset_symptoms)
    btn_reset.pack(side="left", padx=10)

    global result_entry
    result_entry = tk.Entry(frame_buttons, width=40, font=("Helvetica", 12))
    result_entry.pack(side="right", padx=20, pady=5)


# T·∫°o khung menu b√™n tr√°i
frame1 = tk.Frame(window, width=250, height=600, bg="#C4E1F6", padx=10, pady=10)
frame1.grid(row=0, column=0, rowspan=2, sticky="nsw")
frame1.grid_propagate(False)

la1 = tk.Label(frame1, text='M·ª•c T√πy Ch·ªçn', font=title_font, bg="#C4E1F6", fg="#003161")
btnNhapAnh = tk.Button(frame1, width=20, height=2, text='·∫¢nh ch·ª•p X-Quang',
                    font=button_font, bg="#4A628A", fg="#ffffff", command=open_image_file)
btnPhanTichAnh = tk.Button(frame1, width=20, height=2, text='Ph√¢n t√≠ch ·∫£nh',
                    font=button_font, bg="#4A628A", fg="#ffffff", command=open_image_file)
btnLamMoi = tk.Button(frame1, width=20, height=2, text='L√†m m·ªõi',
                    font=button_font, bg="#4A628A", fg="#ffffff", command=reset_image)
btnNhapTrieuChung = tk.Button(frame1, width=20, height=2, text='Nh·∫≠p tri·ªáu ch·ª©ng',
                    font=button_font, bg="#4A628A", fg="#ffffff", command=nhap_trieu_chung)

btnThoat = tk.Button(frame1, width=20, height=2, text='Tho√°t', font=button_font, bg="#D9534F", fg="#ffffff", command=window.quit)

la1.pack(pady=10)
btnNhapAnh.pack(pady=10)
btnPhanTichAnh.pack(pady=10)
btnLamMoi.pack(pady=10)
btnNhapTrieuChung.pack(pady=10)
btnThoat.pack(pady=10)

# Khung hi·ªÉn th·ªã ·∫£nh
frame2 = tk.Frame(window, width=600, height=400, bg="#4A628A", padx=10, pady=10)
frame2.grid(row=0, column=1, sticky="nsew")
frame2.grid_propagate(False)

la2 = tk.Label(frame2, text='·∫¢nh ƒë·∫ßu v√†o', font=title_font, bg="#4A628A", fg="#ffffff")
la3 = tk.Label(frame2, width=300, height=300, bg="#ffffff")
la2.pack()
la3.pack()

# Khung k·∫øt qu·∫£
frame3 = tk.Frame(window, width=600, height=200, bg="#4A628A", padx=10, pady=10)
frame3.grid(row=1, column=1, sticky="nsew")
frame3.grid_propagate(False)

la4 = tk.Label(frame3, text='K·∫øt Qu·∫£ Ph√°t Hi·ªán', font=title_font, bg="#4A628A", fg="#ffffff")
kq_text = tk.Text(frame3, padx=5, pady=5, width=40, height=8, font=label_font)

la4.pack(pady=5)
kq_text.pack()

window.rowconfigure(0, weight=1)
window.rowconfigure(1, weight=1)
window.columnconfigure(1, weight=1)
window.mainloop()